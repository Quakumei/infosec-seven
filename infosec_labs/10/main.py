"""

EAX/AEAD  (Encrypt-then-Authenticate-then-Translate) ‚Äì –¥–≤—É—Ö–ø—Ä–æ—Ö–æ–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å
–∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏  AEAD, –≥–¥–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –∞ –≤—Ç–æ—Ä–æ–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞. –î–ª—è
—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º CTR, –∞ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ OMAC (One Key MAC) –Ω–∞–¥
–∫–∞–∂–¥—ã–º –±–ª–æ–∫–æ–º –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ—Ç–æ–¥–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ EAX.

üîê AEAD (Authenticated Encryption with Associated Data)
–≠—Ç–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –Ω–µ –∞–ª–≥–æ—Ä–∏—Ç–º.
–û–Ω–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º:

–î–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Associated Data), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤)
–ü—Ä–∏–º–µ—Ä—ã AEAD-–∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:

- AES-GCM
- ChaCha20-Poly1305
- EAX

üîê EAX
–≠—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π AEAD-—Ä–µ–∂–∏–º –±–ª–æ—á–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ AES.

–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
–†–∞–±–æ—Ç–∞–µ—Ç —Å –±–ª–æ—á–Ω—ã–º–∏ —à–∏—Ñ—Ä–∞–º–∏ (—á–∞—â–µ –≤—Å–µ–≥–æ AES)
–ù–µ –ø–∞—Ç–µ–Ω—Ç–æ–≤–∞–Ω
–ë–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏


–î–ª—è —Ä–µ–∂–∏–º–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/–¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è 
AES (SubBytes, ShiftRows, MixColomns, ...), –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à–∞–≥–∏ 
—É–∫–∞–∑–∞–Ω—ã, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

–ê–ª–≥–æ—Ä–∏—Ç–º E–°B
–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:
ÔÇ∑–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—É–Ω–¥–æ–≤—ã–µ –∫–ª—é—á–∏
ÔÇ∑–î–æ–±–∞–≤–∏—Ç—å –ø–∞–¥–¥–∏–Ω–≥, –¥–æ–ø–æ–ª–Ω—è—è –¥–∞–Ω–Ω—ã–µ –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ 16 —Ä–∞–∑–º–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 
PKCS7
ÔÇ∑–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏ –ø–æ 16 –±–∞–π—Ç
ÔÇ∑–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å   –∫–∞–∂–¥—ã–π   –±–ª–æ–∫   —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏  AES  (SubBytes,  ShiftRows, 
MixColumns, AddRoundKey)
–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:
ÔÇ∑–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—É–Ω–¥–æ–≤—ã—Ö –∫–ª—é—á–µ–π, –Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
ÔÇ∑–†–∞–∑–±–∏—Ç—å —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏ –ø–æ 16 –±–∞–π—Ç
ÔÇ∑–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ   –∫–∞–∂–¥–æ–≥–æ   –±–ª–æ–∫–∞   –ø–æ  AES  (InvShiftRows,  InvSubBytes, 
AddRoundKey, InvMixColumns)
ÔÇ∑–£–¥–∞–ª–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–¥–¥–∏–Ω–≥–æ–º –±–∞–π—Ç—ã
–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–ø—É—Å—Ç–∏–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Crypto.Cipher.AES:
aes = AES.new(key, AES.MODE_ECB)

–ê–ª–≥–æ—Ä–∏—Ç–º EAX
–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:
ÔÇ∑–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–ª—é—á AES, –µ–¥–∏–Ω—ã–π –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
ÔÇ∑–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Nonce —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
ÔÇ∑–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, 
–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
ÔÇ∑–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
o–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π –ø–æ—Ç–æ–∫ –≤ —Ä–µ–∂–∏–º–µ CTR
o–í—ã–ø–æ–ª–Ω–∏—Ç—å XOR –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
o–í—ã—á–∏—Å–ª–∏—Ç—å OMAC-—Ç–µ–≥ –¥–ª—è nonce, AEAD –∏ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞. Tag ‚Äì OMAC(nonce || 
AAD || ciphertext, key)
ÔÇ∑–û–±—ä–µ–¥–∏–Ω–∏—Ç—å nonce, —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –∏ AEAD
–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ:
ÔÇ∑–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–ª—é—á, —Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
ÔÇ∑–ò–∑–≤–ª–µ—á—å nonce, —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –∏ —Ç–µ–≥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
ÔÇ∑–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞
o–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ OMAC —Ç–µ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ nonce, AEAD –∏ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–∞
9
o–ü—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ç–µ–≥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É
ÔÇ∑–î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
o–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ AES-CTR
o–í—ã–ø–æ–ª–Ω–∏—Ç—å XOR –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç–æ–º
ÔÇ∑–ü—Ä–∏ –≤–µ—Ä–Ω–æ–º —Ç–µ–≥–µ ‚Äì –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ, –∏–Ω–∞—á–µ –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–ø—É—Å—Ç–∏–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Crypto.Cipher.AES:
aes = AES.new(key, AES.MODE_CTR)

Test vectors from here: https://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
"""
import os
from pathlib import Path
import typing as tp
import traceback

from Crypto.Cipher import AES
from Crypto.Hash import CMAC as OMAC

from Crypto.Random import get_random_bytes

from omac import omac

def get_omac_tag(nonce: bytes, aad: bytes, encrypted_message: bytes, key) -> bytes:
    tag_bytes = nonce + aad + encrypted_message

    cmac = OMAC.new(key, ciphermod=AES)
    tag_bytes_cmac = cmac.update(tag_bytes).digest()

    tag_bytes_omac = omac(key, tag_bytes)

    assert tag_bytes_cmac == tag_bytes_omac
    return tag_bytes_cmac

def encrypt(message: bytes, encryption_data: dict[str, tp.Any]) -> tp.Tuple[bytes, dict]:
    key = encryption_data['key']
    aad = encryption_data['aad']

    cipher = AES.new(key, AES.MODE_CTR)
    nonce = cipher.nonce
    encrypted_message = cipher.encrypt(message)
    omac_tag = get_omac_tag(nonce, aad, encrypted_message, key)

    return encrypted_message, {"nonce": nonce, "tag": omac_tag}

def decrypt(encrypted_message: bytes, decryption_data: dict[str, tp.Any]) -> bytes:
    key = decryption_data['key']
    nonce = decryption_data['nonce']
    awaited_tag = decryption_data['tag']
    aad = decryption_data['aad']
    reconstructed_tag = get_omac_tag(nonce, aad, encrypted_message, key)

    if awaited_tag != reconstructed_tag:
        raise ValueError(f"Tag mismatch: {awaited_tag} != {reconstructed_tag}")

    cipher = AES.new(key, AES.MODE_CTR, nonce=nonce)
    decrypted_message = cipher.decrypt(encrypted_message) # TODO: xor
    return decrypted_message

def get_encryption_data(log=False):
    encryption_data = {
        "key": get_random_bytes(192 // 8), # 24 bytes
        "aad": "userword:password".encode('utf-8'), # Additional Authentication Data
    }
    if log:
        print(encryption_data)
    return encryption_data

def test_text(text: str):
    encryption_data = get_encryption_data(log=True)
    encrypted, decryption_data =  encrypt(text.encode('utf-8'), encryption_data)
    # encrypted, _ =  encrypt((text+'kek').encode('utf-8'), encryption_data)
    decryption_data = {**decryption_data, "key": encryption_data["key"], "aad": encryption_data["aad"]}
    print(decryption_data)
    decrypted: bytes = decrypt(encrypted, decryption_data)
    decrypted_text: str = decrypted.decode('utf-8')

    assert text == decrypted_text, f'{text} != {decrypted_text}'


def cypher_file(path: str | Path, output_path: str | Path, overwrite: bool = True):
    path = Path(path)
    output_path = Path(output_path)
    if not path.exists():
        raise FileNotFoundError()
    if output_path.exists() and not overwrite:
        raise FileExistsError()
    elif output_path.exists():
        os.unlink(str(output_path))
    with open(path, 'rb') as f:
        content = f.read()

    encryption_data = get_encryption_data(log=True)
    encrypted_content, decryption_data = encrypt(content, encryption_data)
    with open(output_path, "wb") as f:
        f.write(encrypted_content)

    decryption_data.update(encryption_data)
    print(decryption_data)
    decrypted_content = decrypt(encrypted_content, decryption_data)

    assert decrypted_content == content

def main():
    # Some text tests
    try:
        test_text("1234567890_")
        test_text("1234567890_" * 10)
        test_text("1234567890_" * 7)
        print("‚úÖ Text Checks passed")
    except AssertionError:
        print(f"‚ùå Text Checks failed \n{traceback.format_exc()}")

    # Encrypt/decrypt file
    try:
        cypher_file("infosec_labs/10/mit.txt", "infosec_labs/10/mit_encrypted.txt")
        print("‚úÖ File Encryption Checks passed")
    except AssertionError:
        print(f"‚ùå File Encryption Checks failed \n{traceback.format_exc()}")

if __name__=='__main__':
    # AES-EAX 192 bit key
    main()